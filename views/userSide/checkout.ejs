<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Heaven Interior</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>

 <style>
        .checkout-section {
            width: 98%;
            background-color: rgb(251, 251, 251);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 10px;
            text-align: center;
            border: 1px solid #ddd;
        }

        .qty-form button {
            padding: 5px;
            margin: 0 5px;
            font-size: 16px;
            cursor: pointer;
        }

        .btn-remove, .btn-delete{
            background-color: #dc3545;
            color: white;
            padding: 5px 10px;
            cursor: pointer;
            border: none;
        }

        .btn-edit{
            background-color: #2ba44f;
            color: white;
            padding: 5px 10px;
            cursor: pointer;
            border: none;
 
        }

        .btn-checkout {
            display: inline-block;
            padding: 10px 20px;
            background-color: #28a745;
            color: white;
            text-decoration: none;
            margin-top: 20px;
        }

        .btn-checkout:hover {
            background-color: #218838;
        }

        .modal-content {
            padding: 20px;
            background-color: white;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1000;
            background-color: rgba(0, 0, 0, 0.5);
            width: 100%;
            max-width: 500px;
            padding: 20px;
            border-radius: 5px;
        }
        
#orderSuccessModal {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1000;
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.3);
}

.qty-container {
    display: flex;
    align-items: center;
    width: 30px;
}

.qty-container form {
    margin-left: 62%;
}

    </style>
</head>
<body>

    <%- include('../partials/user_navbar.ejs') %>
    <div class="container">
        <h2>Checkout</h2>
        <div class="checkout-section">
            <% if (cart && cart.length > 0) { %>
        <table>
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Price</th>
                    <th>Total</th>
                    <!-- <th>Action</th> -->
                </tr>
            </thead>
            <tbody>
                <% cart.forEach(item => { %>
                    <tr>
                        <!-- Product image and name -->
                        <td>
                            <img src="<%= item.image %>" alt="<%= item.name %>" style="width: 50px; height: auto;">
                            <p><%= item.name %></p>
                        </td>
            
                        <!-- Quantity controls -->
                        <td>
                            <div class="qty-container">
                                <form action="/user/update-cart/<%= item.productId %>" method="POST" class="qty-form">
                                    <input type="hidden" name="action" value="decrease">
                                    <!-- <button type="submit" <%= item.quantity === 1 ? 'disabled' : '' %>>-</button> -->
                                </form>
                                <span style="margin-left: 73%;"><%= item.quantity %></span> <!-- Display quantity inline -->
                                <form action="/user/update-cart/<%= item.productId %>" method="POST" class="qty-form">
                                    <input type="hidden" name="action" value="increase">
                                    <!-- <button type="submit" <%= item.quantity >= item.stock ? 'disabled' : '' %>>+</button> -->
                                </form>
                            </div>
                        </td>
                                    
                        <!-- Product price -->
                        <td>
                            <% if (item.discountedPrice) { %>
                                <p style="display: inline; color: #000000;">₹<%= item.discountedPrice %></p> <!-- Discounted price -->
                            <% } else { %>
                                ₹<%= item.price %> <!-- Original price if no discount -->
                            <% } %>
                        </td>            
                        <!-- Product total (quantity * discounted price) -->
                        <td>
                            <% 
                                const unitPrice = item.discountedPrice ? item.discountedPrice : item.price; 
                                const totalPrice = unitPrice * item.quantity; 
                            %>
                            ₹<%= totalPrice.toFixed(2) %>
                        </td>
                    </tr>
                <% }); %>
            </tbody>
            
        </table>    
        <h2 style="font-weight: bolder; color: #14482a;">
            Total Price: ₹<%= cart.reduce((total, item) => total + (item.discountedPrice * item.quantity), 0).toFixed(2) %>
        </h2>

            <% } else { %>
                <p>Your cart is empty. Please add items to your cart before checking out.</p>
            <% } %>
        </div>
    
    
        <div class="checkout-section">
            <div id="couponSection">
                <h3>Apply Coupon</h3>
                <select id="couponDropdown">
                    <option value="">Select a coupon</option>
                    <% coupons.forEach(function(coupon) { %>
                        <option value="<%= coupon.code %>"><%= coupon.code %> - <%= coupon.discountValue %> <%= coupon.discountType %></option>
                    <% }); %>
                </select>
                <button id="applyCouponBtn">Apply</button>
                <button id="removeCouponBtn">Remove Coupon</button>
                <div id="couponMessage"></div>
            </div>
        </div> 


            <div id="newTotalPriceContainer" style="display: none;">
                <h2 id="newTotalPrice" style="font-size: 2rem; color: rgb(255, 255, 255); font-weight: bold;">
                    New Total Price: ₹<span id="totalPriceDisplay"></span>
                </h2>
            </div>

            
            <div class="checkout-section">
                <div class="checkout-section">
                    <h3>Your Addresses</h3>
                    <button type="button" class="btn btn-success" onclick="openAddAddressModal()">Add New Address</button>
            
                    <div id="addressList">
                        <% addresses.forEach(address => { %>
                            <div data-address-id="<%= address._id %>">
                                <span style="margin-left: 8px;">
                                    <%= address.name %><br>
                                    <%= address.mobileNumber %><br>
                                    <%= address.city %><br>
                                    <%= address.state %><br>
                                    <%= address.pinCode %><br>
                                </span>
                                <button type="button" class="btn-edit" onclick="editAddress('<%= address._id %>', '<%= address.name %>', '<%= address.mobileNumber %>', '<%= address.city %>', '<%= address.state %>', '<%= address.pinCode %>')">Edit</button>
                                <button type="button" class="btn-delete" onclick="deleteAddress('<%= address._id %>')">Delete</button>
                            </div>
                        <% }) %>
                    </div>
                                    </div>
        
                <form id="paymentForm" action="/user/checkout/placeOrder" method="POST" onsubmit="return validateForm()">
                    <h4>Select Your Address:</h4>
                    
                    <!-- Address Dropdown -->
                    <select name="selectedAddress" id="selectedAddress" required onchange="enablePaymentOptions()" onclick="displayDeliveryDetails()">
                        <option value="">Select Address</option>
                        <% addresses.forEach(address => { %>
                            <option value="<%= address._id %>"><%= address.name %>, <%= address.city %>, <%= address.state %> - <%= address.pinCode %></option>
                        <% }) %>
                    </select>
                    
                    <!-- Error Message Placeholder -->
                    <div id="addressError" style="color: red; display: none;">
                        Please select an address before proceeding.
                    </div>
                    
                    <div id="displayDeliveryDetails" style="display: none;">
                        <h3>Delivery Charge:</h3>
                        <p id="deliveryCharge">₹<%= deliveryCharge.toFixed(2) %></p>
                        <h2 style="color: green;">Total Price: <span id="totalPrice">₹<%= totalPrice.toFixed(2) %></span></h2>
                    </div>
                                        
                    <div class="checkout-section">
                        <h4>Payment Options:</h4>
                        
                        <div>
                            <label>
                                <input type="radio" name="paymentMethod" value="Wallet" id="useWallet" disabled required onchange="toggleWalletUsage()">
                                 Wallet(wallet balance:<%= walletBalance.toFixed(2) %>)
                            </label>
                            <div id="walletMessage"></div>
                        </div>
                        <div>
                            <label>
                                <input type="radio" name="paymentMethod" value="COD" id="useCOD" disabled required onchange="validatePaymentMethod()"> Cash on Delivery
                            </label>
                            <div id="codMessage" style="color: red;">
                                <% if (errorMessage) { %>
                                    <span><%= errorMessage %></span>
                                <% } %>
                            </div>
                        </div>
                        <div>
                            <label>
                                <input type="radio" name="paymentMethod" value="Razorpay" disabled required> Credit Card (Razorpay)
                            </label>
                        </div>
                        
                        <input type="hidden" name="razorpayPaymentId" id="razorpayPaymentId"/>
                        <input type="hidden" name="razorpayOrderId" id="razorpayOrderId"/>
                        <input type="hidden" name="razorpaySignature" id="razorpaySignature"/>
                        
                        <% if (totalPrice > 0) { %>
                            <button type="submit" id="rzp-button">Proceed</button>
                        <% } else { %>
                            <button type="button" id="proceedButton" onclick="location.href='/user/checkout/orderConfirmation'">Proceed</button>
                        <% } %>
                    </div>
                </form>
            </div>
            
         </div>
    

    <!-- Add Address Modal -->
    <div class="modal" id="addAddressModal">
        <div class="modal-content">
            <h4>Add New Address</h4>
            <form action="/user/checkout/addresses/add" method="POST" id="addAddressForm">
                <input type="text" name="name" placeholder="Name" required class="form-control mb-2" id="addName">
                <input type="text" name="mobileNumber" placeholder="Mobile Number" required class="form-control mb-2" 
                id="addMobileNumber" pattern="^\d{10}$" title="Mobile number must be exactly 10 digits" 
                oninput="this.setCustomValidity('')" oninvalid="this.setCustomValidity('Please enter a valid 10-digit mobile number.')">               
                <input type="text" name="city" placeholder="City" required class="form-control mb-2" id="addCity">
                <input type="text" name="state" placeholder="State" required class="form-control mb-2" id="addState">
                <input type="text" name="pinCode" placeholder="Pin Code" required class="form-control mb-2" 
                id="addPinCode" pattern="^\d{6}$" title="PIN code must be exactly 6 digits" 
                oninput="this.setCustomValidity('')" oninvalid="this.setCustomValidity('Please enter a valid 6-digit PIN code.')">              
                <button type="submit" class="btn btn-success">Add Address</button>
                <button type="button" class="btn btn-danger" onclick="closeAddAddressModal()">Close</button>
            </form>
            </div>
    </div>

    <!-- Edit Address Modal -->
<div class="modal" id="editAddressModal">
    <div class="modal-content">
        <h4>Edit Address</h4>
        <form action="" method="POST" id="editAddressForm">
            <input type="hidden" name="addressId" id="editAddressId">
            <input type="text" name="name" placeholder="Name" required class="form-control mb-2" id="editName">
            <input type="text" name="mobileNumber" placeholder="Mobile Number" required class="form-control mb-2" 
                   id="editMobileNumber" pattern="^\d{10}$" title="Mobile number must be exactly 10 digits" 
                   oninput="this.setCustomValidity('')" oninvalid="this.setCustomValidity('Please enter a valid 10-digit mobile number.')">
            <input type="text" name="city" placeholder="City" required class="form-control mb-2" id="editCity">
            <input type="text" name="state" placeholder="State" required class="form-control mb-2" id="editState">
            <input type="text" name="pinCode" placeholder="Pin Code" required class="form-control mb-2" 
                   id="editPinCode" pattern="^\d{6}$" title="PIN code must be exactly 6 digits" 
                   oninput="this.setCustomValidity('')" oninvalid="this.setCustomValidity('Please enter a valid 6-digit PIN code.')">           
            <button type="submit" class="btn btn-success">Update Address</button>
            <button type="button" class="btn btn-danger" onclick="closeEditAddressModal()">Close</button>
            </form>
            </div>
</div>

    <%- include('../partials/footer.ejs') %>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.min.js"></script>
    <!-- checkout.ejs -->
<script>
    const totalPrice = <%= totalPrice %>;
    const walletBalance = <%= walletBalance %>;
</script>
    <script>

        function displayDeliveryDetails(){
            deliverydetails = document.getElementById('displayDeliveryDetails');
            deliverydetails.style.display = 'block'
        }
                // Function to enable payment options when an address is selected
                function enablePaymentOptions() {
                    const addressDropdown = document.getElementById('selectedAddress');
                    const paymentOptions = document.querySelectorAll('input[name="paymentMethod"]');
            
                    // Enable payment radio buttons only if an address is selected
                    if (addressDropdown.value) {
                        paymentOptions.forEach(option => {
                            option.disabled = false; // Enable radio buttons
                        });
                        document.getElementById('addressError').style.display = 'none'; // Hide error message
                    } else {
                        paymentOptions.forEach(option => {
                            option.disabled = true; // Disable radio buttons
                        });
                    }
                }
            
                // Function to validate the form
                function validateForm() {
                    const addressDropdown = document.getElementById('selectedAddress');
                    const addressError = document.getElementById('addressError');
                    
                    if (addressDropdown.value === "") {
                        addressError.style.display = "block";  // Show error message
                        return false;  // Prevent form submission
                    }
                    
                    addressError.style.display = "none";  // Hide error if valid
                    return true;  // Allow form submission
                }

    // Function to update delivery charge and total price based on selected address
    document.querySelector('select[name="selectedAddress"]').addEventListener('change', async function() {
        const selectedAddressId = this.value;
        const deliveryChargeElement = document.getElementById('deliveryCharge');
        const totalPriceElement = document.getElementById('totalPrice');
        
        try {
            // Make an API call to fetch delivery charge for the selected address
            const response = await fetch(`/user/checkout/getDeliveryCharge/${selectedAddressId}`);
            const data = await response.json();
            
            if (data.success) {
                // Update the delivery charge and total price elements
                deliveryChargeElement.textContent = `₹${data.deliveryCharge.toFixed(2)}`;
                const newTotalPrice = parseFloat(data.deliveryCharge) + parseFloat(data.cartTotal);
                totalPriceElement.textContent = `₹${newTotalPrice.toFixed(2)}`;
            } else {
                console.error('Error fetching delivery charge:', data.message);
            }
        } catch (error) {
            console.error('Error fetching delivery charge:', error);
        }
    });


// Assuming you have already defined totalPrice and walletBalance as necessary
async function validatePaymentMethod() {
    const codMessage = document.getElementById('codMessage');
    const codOption = document.getElementById('useCOD');
    // Clear previous messages
    codMessage.innerHTML = '';

    const totalPrice = <%= totalPrice %>;
    

    if (codOption.checked) {
        if (totalPrice > 1000) {
            codMessage.innerHTML = '<span style="color: red;">Cash on Delivery is only available for orders less than ₹1000.</span>';
        } else {
            codMessage.innerHTML = '<span style="color: green;">Cash on Delivery is available for this order.</span>';
        }
    }
// Call validatePaymentMethod on page load to check the current selection
window.onload = function() {
    validatePaymentMethod();
};
}

        function openAddAddressModal() {
            document.getElementById('addAddressModal').style.display = 'block';
        }
        
        function closeAddAddressModal() {
            document.getElementById('addAddressModal').style.display = 'none';
        }
        
        window.onclick = function(event) {
            const modal = document.getElementById('addAddressModal');
            if (event.target === modal) {
                closeAddAddressModal();
            }
        }
        
    function editAddress(id, name, mobileNumber, city, state, pinCode) {
    document.getElementById('editAddressId').value = id;
    document.getElementById('editName').value = name;
    document.getElementById('editMobileNumber').value = mobileNumber;
    document.getElementById('editCity').value = city;
    document.getElementById('editState').value = state;
    document.getElementById('editPinCode').value = pinCode;

    // Dynamically update the form action URL with the address ID
    document.getElementById('editAddressForm').action = `/user/checkout/addresses/edit/${id}`;
    
    document.getElementById('editAddressModal').style.display = 'block';
}

function closeEditAddressModal() {
    document.getElementById('editAddressModal').style.display = 'none';
}

window.onclick = function(event) {
    const modal = document.getElementById('editAddressModal');
    if (event.target === modal) {
        closeEditAddressModal();
    }
}

function deleteAddress(addressId) {
    fetch(`/user/checkout/addresses/delete/${addressId}`, {
        method: 'POST'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Remove the address div from the DOM
            const addressElement = document.querySelector(`div[data-address-id="${addressId}"]`);
            if (addressElement) {
                addressElement.remove();
            } else {
                console.log("Address element not found!");
            }
        } else {
            alert("Failed to delete address: " + data.message);
        }
    })
    .catch(error => {
        console.error("Error deleting address:", error);
        alert("Error deleting address. Please try again later.");
    });
}

document.getElementById('rzp-button').onclick = async function (e) {
    e.preventDefault();

    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;

    if (paymentMethod === 'Razorpay') {
    try {
        
        // Fetch order details from the backend
        const response = await fetch('/user/checkout/createOrder', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ selectedAddress: document.querySelector('select[name="selectedAddress"]').value })
        });

        if (!response.ok) {
            throw new Error('Failed to create Razorpay order');
        }

        const data = await response.json();

        const options = {
            "key": data.key,
            "amount": data.amount,
            "currency": data.currency,
            "name": "Heaven_interior",
            "description": "Order Payment",
            "image": "/images/Screenshot%202024-10-23%20075333.png",
            "order_id": data.orderId,
            "handler": function (response) {
                document.getElementById('razorpayPaymentId').value = response.razorpay_payment_id;
                document.getElementById('razorpayOrderId').value = response.razorpay_order_id;
                document.getElementById('razorpaySignature').value = response.razorpay_signature;
                document.getElementById('paymentForm').submit();
            },
"modal": {
    ondismiss: function () {
        console.log('Payment modal closed');
        alert("Payment was not completed. Please try again.");
        const selectedAddressId = document.querySelector('select[name="selectedAddress"]').value;
        const paymentMethod = 'Razorpay';
        const orderData = {
            paymentMethod,
            selectedAddress: selectedAddressId,
            razorpayPaymentId: null, // No payment completed
            razorpayOrderId: null,    // No order ID generated
            razorpaySignature: null    // No signature
        };

        // Send the request to place the order with pending payment status
        fetch('/user/checkout/placeOrderPending', { // Using Fetch API for a modern approach
            method: 'POST',
            headers: {
                'Content-Type': 'application/json', // Set content type to JSON
            },
            body: JSON.stringify(orderData), // Convert orderData to JSON
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');

            }
            return response.json();
        })
        .then(data => {
            console.log('Order placed with pending payment status:', data);
            window.location.href = '/user/orders'; // Uncomment to redirect
        })
        .catch(error => {
            console.error('Error placing order:', error);
            // Handle error, show a message to the user
            alert('An error occurred while placing your order. Please try again.');
        });
    }
},
            

            "prefill": {
                "name": "Customer Name",
                "email": "customer@example.com",
                "contact": "9999999999"
            },
            "theme": {
                "color": "#3399cc"
            }
        };

        const rzp1 = new Razorpay(options);
        rzp1.open();

    } catch (error) {
        console.error('Error in initiating Razorpay payment:', error);
        alert("Failed to initiate Razorpay payment. Please try again.");
    }

} else {
    // If COD or other payment methods are selected
    document.getElementById('paymentForm').submit();
}
}

document.getElementById('applyCouponBtn').addEventListener('click', async function() {
    const couponCode = document.getElementById('couponDropdown').value;
    const response = await fetch('/user/checkout/applyCoupon', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ couponCode })
    });
    
    const data = await response.json();
    document.getElementById('couponMessage').innerText = data.message;

    if (data.success) {
        // Update the displayed total price with the new total
        document.getElementById('totalPriceDisplay').innerText = data.newTotalPrice.toFixed(2);
        document.getElementById('newTotalPriceContainer').style.display = 'block'; // Show the new price container
    }
  });

document.getElementById('removeCouponBtn').addEventListener('click', async function() {
    const response = await fetch('/user/checkout/removeCoupon', {
        method: 'POST'
    });

    const data = await response.json();
    document.getElementById('couponMessage').innerText = data.message;

    if (data.success) {
        // Update the displayed total price with the new total
        const newTotalPrice = data.newTotalPrice.toFixed(2);
        document.getElementById('totalPriceDisplay').innerText = `₹${newTotalPrice}`; // Ensure currency format
        document.getElementById('discountAmountDisplay').innerText = `Discount Amount: ₹${data.discountAmount.toFixed(2)}`; // Update discount amount
        document.getElementById('newTotalPriceContainer').style.display = 'block'; // Show the new price container
    }
});

document.getElementById('applyCouponBtn').addEventListener('click', async function() {
            const couponCode = document.getElementById('couponDropdown').value;
            const response = await fetch('/user/checkout/applyCoupon', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ couponCode })
        });

        const result = await response.json();
        if (result.success) {
            // Display the new total after applying the coupon
            updateTotalPrice(result.newTotalPrice);
            document.getElementById('couponMessage').innerHTML = `
        <div class="coupon-message-box success">
            <h3 style="color:green">Coupon Applied Successfully!</h3>
            <p><strong>Coupon:</strong> ${result.message}</p>
            <p><strong>New Total:</strong> <span class="new-total">₹${result.newTotalPrice.toFixed(2)}</span></p>
        </div>
    `;   
     } else {
            document.getElementById('couponMessage').innerHTML = result.message;
        }
    });

    // Remove coupon
    document.getElementById('removeCouponBtn').addEventListener('click', async function() {
        const response = await fetch('/user/checkout/removeCoupon', { method: 'POST' });

        const result = await response.json();
        if (result.success) {
            // Reset to original total price
            updateTotalPrice(result.originalPrice);
            document.getElementById('couponMessage').innerHTML = 'Coupon removed successfully!';
        }
    });

   
    async function fetchWalletBalance() {
    const response = await fetch('/user/wallet/balance'); // Adjust this endpoint to your actual API
    if (response.ok) {
        const data = await response.json();
        return data.balance; // Return the balance from the response
    }
    return 0; // Default to 0 if there's an error
}


async function toggleWalletUsage() {
    const walletMessage = document.getElementById('walletMessage');
    const walletOption = document.getElementById('useWallet');

    // Clear previous message
    walletMessage.innerHTML = '';

    if (walletOption.checked) {
        if (walletBalance < totalPrice) {
            walletMessage.innerHTML = '<span style="color: red;">Insufficient wallet balance for this purchase.</span>';
            return false;
        } else {
            walletMessage.innerHTML = '<span style="color: green;">Wallet balance is sufficient.</span>';
            return true;
        }
    }
}


// Update the displayed total price
    function updateTotalPrice(newTotalPrice) {
        document.getElementById('totalPriceDisplay').innerText = newTotalPrice.toFixed(2);
        document.getElementById('newTotalPriceContainer').style.display = 'block'; // Show updated total price section
    }


    document.addEventListener('DOMContentLoaded', async () => {
    try {
        const response = await fetch('/adminPanel/coupons');
        const coupons = await response.json();
        
        const existingCouponsDropdown = document.getElementById('existingCoupons');
        
        // Populate dropdown with coupons
        coupons.forEach(coupon => {
            const option = document.createElement('option');
            option.value = coupon.code; // Assuming your coupon model has a `code` field
            option.textContent = `${coupon.code} - ${coupon.discount}% off`; // Adjust based on your model
            existingCouponsDropdown.appendChild(option);
        });
    } catch (error) {
        console.error('Error fetching coupons:', error);
    }
});


document.addEventListener('DOMContentLoaded', async () => {
    try {
        const response = await fetch('/adminPanel/coupons'); // Adjust the endpoint
        const coupons = await response.json();
        
        const existingCouponsDropdown = document.getElementById('existingCoupons');
        
        // Populate dropdown with coupon names
        coupons.forEach(coupon => {
            const option = document.createElement('option');
            option.value = coupon.name; // Assuming your coupon model has a `name` field
            option.textContent = `${coupon.name} - ${coupon.discount}% off`; // Adjust as needed
            existingCouponsDropdown.appendChild(option);
        });
    } catch (error) {
        console.error('Error fetching coupons:', error);
    }
});

// Handle the Apply button click
document.getElementById('applyCouponBtn').addEventListener('click', function() {
    const selectedCoupon = document.getElementById('existingCoupons').value;
    const couponMessage = document.getElementById('couponMessage');
    
});

window.history.replaceState(null, null, '/user/shop');
</script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</body>
</html>
 